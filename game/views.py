from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse

import threading
import re
import json
import logging
from decouple import config
from datetime import datetime

from .models.build import Build, Stock
from .models.player import Player
from .models.war import War
from .models.inventory import Inventory
from .models.market import Product
from .models.cave import CaveMap, CaveProgress
from .models.promocode import PromoCode

from .fortune.fortune import Fortune
from .caves.caves import CaveGenerator, CaveManager

from .actions.functions import *
from .actions.chests import *
from .actions.altar import *
from system.models import Registration, Chat, Report

from .actions.statistic import *

secret_token = config('SECRET_TOKEN')
confirmation_token = '1f0c6305'


@csrf_exempt
def index(request):
    if request.method == 'POST':
        data = json.loads(request.body.decode("utf-8"))
        if data['secret'] == secret_token:
            if data['type'] == 'confirmation':
                return HttpResponse(confirmation_token, content_type="text/plain", status=200)
            if data['type'] == 'wall_reply_new':
                comments_action(data['object'])
                return HttpResponse('ok', content_type="text/plain", status=200)
            elif data['type'] == 'message_new':
                from_id = data['object']['from_id']
                peer_id = data['object']['peer_id']
                if from_id < 0:
                    return HttpResponse('ok', content_type="text/plain", status=200)
                elif from_id == peer_id:
                    chat_info = {
                        'user_id': from_id,
                        'peer_id': from_id,
                        'chat_id': from_id
                    }
                    new_enter(chat_info, data)
                else:
                    chat_info = {
                        'user_id': from_id,
                        'peer_id': peer_id,
                        'chat_id': peer_id - 2000000000,
                        'nick': '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫',
                    }
                    new_enter(chat_info, data)

                return HttpResponse('ok', content_type="text/plain", status=200)
            return HttpResponse('–û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π type')
        else:
            return HttpResponse('–û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π secret key')
    else:
        return HttpResponse('–°–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')


def new_enter(chat_info, data):
    # –í—Ö–æ–¥
    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—Å—Ç—å —Ç–æ —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã
    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–¥–æ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
    # –ò–ª–∏ —ç—Ç–æ –≤–≤–µ–ª–∏ –Ω–∏–∫
    try:
        player = Player.objects.get(user_id=chat_info['user_id'])

        action_time = data['object']['date']
        if 'payload' in data['object']:
            payload = json.loads(data['object']['payload'])
            if 'command' in payload:
                action(payload['command'], player, action_time, chat_info)
        else:
            text = data['object']['text']
            if text:
                action(text, player, action_time, chat_info)

    except Player.DoesNotExist:
        text = data['object']['text']

        if Registration.objects.filter(user_id=chat_info['user_id']).exists():

            create_models(chat_info, text)

        elif start_in(chat_info, text):
            Registration.objects.create(user_id=chat_info['user_id'])
            mess = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cave World!\n' \
                   '–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:'
            send(chat_info, mess)


def start_in(chat_info, text):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–µ—Ç
    start_reg = True

    if chat_info['user_id'] != chat_info['peer_id']:

        start = ['start', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', '—Ä–µ–≥', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è']

        if text.lower() in start:
            start_reg = True
        else:
            start_reg = False

    return start_reg


def create_models(chat_info, nick):
    # –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ —Å–∞–º—É –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞.
    try:

        war = War.objects.create(user_id=chat_info['user_id'])
        stock = Stock.objects.create(user_id=chat_info['user_id'])
        build = Build.objects.create(user_id=chat_info['user_id'], stock=stock)
        inventory = Inventory.objects.create(user_id=chat_info['user_id'])

    except:

        war = War.objects.get(user_id=chat_info['user_id'])
        build = Build.objects.get(user_id=chat_info['user_id'])
        inventory = Inventory.objects.get(user_id=chat_info['user_id'])

    try:

        vk = vk_connect()
        user = vk.users.get(user_ids=str(chat_info['user_id']))
        user = user[0]
        if user['first_name']:
            first_name = user['first_name']
        else:
            first_name = ''
        if user['last_name']:
            last_name = user['last_name']
        else:
            last_name = ''

        player = Player.objects.create(user_id=chat_info['user_id'],
                                       place='cave',
                                       nickname=nick,
                                       first_name=first_name,
                                       last_name=last_name,
                                       build=build,
                                       war=war,
                                       inventory=inventory,
                                       chat_id=chat_info['peer_id'],
                                       )

        mess = '–í–∞—à –Ω–∏–∫ - ' + player.nickname + '\n'
        mess += '–ù–∞–ø–∏—à–∏ "–∫–æ–º–∞–Ω–¥—ã", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.' + '\n' + \
                '–ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å —É—Ä–æ–≤–Ω–µ–º –∏ –ø–æ—Å—Ç—Ä–æ–π–∫–æ–π –∑–¥–∞–Ω–∏–π!' + '\n'

        send(chat_info, mess, get_keyboard(player))

    except:

        chat_info['nick'] = "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫"
        mess = "–ù–∏–∫ –∑–∞–Ω—è—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!"
        send(chat_info, mess)


def add_update_chat(chat_info):

    count = 0
    try:
        count = count_users_chat(chat_info)
    except vk_api.ApiError as e:
        pass
        #print(e)

    if count == 0:
        is_admin = False
    else:
        is_admin = True

    try:
        Chat.objects.create(peer_id=chat_info['peer_id'], count_users=count, is_admin=is_admin)
    except:
        Chat.objects.filter(peer_id=chat_info['peer_id']).update(count_users=count, is_admin=is_admin)


def action(command, player, action_time, chat_info):
    answer = None
    chat_info['nick'] = player.nickname
    stat = {
        'category': '',
        'action': '',
        'label': '',
        'value': 1,
    }

    if command.lower() == '–Ω–∏–∫' or command.lower() == '–Ω–∏–∫ –≤—Ä–µ–º—è':
        answer = player.check_change_nickname_time(action_time)
    elif re.match(r'–Ω–∏–∫ ', command.lower()):
        part = command.split()
        if len(part) >= 2:
            nick = command[4:]
            answer = player.change_nickname(nick, action_time)
        else:
            answer = "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏–∫!\n–ù–∏–∫ [–Ω–æ–≤—ã–π –Ω–∏–∫]"

    command = command.lower()

    # –ú–µ–Ω—é

    if re.match(r'–¥–æ–Ω–∞—Ç', command):
        answer = '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ —Å—Å—ã–ª–∫–µ:\n' + \
                 'https://vk.com/app6471849_-176853872\n\n' + \
                 '–ó–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –≤–∏–¥–∂–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–ø–∞:\n 1 —Ä—É–±–ª—å = 1 üíÄ'

    elif command == '–∫–æ–º–∞–Ω–¥—ã':
        answer = commands(player)
        stat['category'] = 'Menu'
        stat['action'] = 'Help'
        stat['label'] = '–ü–æ–º–æ—â—å'
    elif command == '–ø–æ–º–æ—â—å':
        answer = "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n" + "https://vk.com/@cave_world_bot-cave-world-opisanie-komand"
    elif command == '–±–æ–Ω—É—Å':
        answer = player.bonus(action_time)
        stat['category'] = 'Menu'
        stat['action'] = 'Bonus'
        stat['label'] = '–ë–æ–Ω—É—Å'
    elif command == '–ø—Ä–æ—Ñ–∏–ª—å' or command == '–ª–æ—Ä–¥':
        answer = player.profile(action_time)
        stat['category'] = 'Menu'
        stat['action'] = 'Profile'
        stat['label'] = '–ü—Ä–æ—Ñ–∏–ª—å'
    elif command == 'inventory':
        answer = player.go_inventory()
        stat['category'] = 'Menu'
        stat['action'] = 'Inventory'
        stat['label'] = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å'
    elif command == '—Å—É–Ω–¥—É–∫–∏':
        answer = player.go_chests()
        stat['category'] = 'Menu'
        stat['action'] = 'Chests'
        stat['label'] = '–°—É–Ω–¥—É–∫–∏'
    elif command == '—Ç–æ–ø':
        answer = player.top()
        stat['category'] = 'Menu'
        stat['action'] = 'Top'
        stat['label'] = '–¢–æ–ø'
    elif command == '—Ç–æ–ø –ª–≤–ª' or command == '—Ç–æ–ø —É—Ä–æ–≤–µ–Ω—å':
        answer = player.top_lvl()
        stat['category'] = 'Menu'
        stat['action'] = 'Top_Lvl'
        stat['label'] = '–¢–æ–ø_–£—Ä–æ–≤–µ–Ω—å'
    elif re.match(r'—Ç–æ–ø —á–µ—Ä–µ–ø', command):
        answer = player.top_skull()
        stat['category'] = 'Menu'
        stat['action'] = 'Top_Skull'
        stat['label'] = '–¢–æ–ø_–ß–µ—Ä–µ–ø'
    elif re.match(r'—Ç–æ–ø –∞—Ç–∞–∫', command):
        answer = player.top_attack()
    elif re.match(r'—Ç–æ–ø –∑–∞—â–∏—Ç', command):
        answer = player.top_defend()
    elif re.match(r'—Ç–æ–ø –∑–æ–ª–æ—Ç', command):
        answer = player.top_gold()
    elif command in ('—Ç–æ–ø –∑–¥–∞–Ω–∏—è', '—Ç–æ–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π'):
        answer = player.top_build()
    elif re.match(r'—Ç–æ–ø –ø–µ—â–µ—Ä', command):
        answer = player.top_cave()
    elif command == '—Å–∫–ª–∞–¥' or command == '—Ä–µ—Å—É—Ä—Å—ã':
        answer = player.build.stock.stock(player.build, action_time)
        stat['category'] = 'Menu'
        stat['action'] = 'Stock'
        stat['label'] = '–°–∫–ª–∞–¥'
    elif command == 'build_cave':
        stat['category'] = 'Menu'
        stat['action'] = 'Build_Cave'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ü–æ–¥–∑–µ–º–µ–ª—å–µ'
        answer = player.cave_build()
    elif command == 'build_land':
        answer = player.land_build()
        stat['category'] = 'Menu'
        stat['action'] = 'Build_Land'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ó–µ–º–ª–∏'
    elif command == '–∑–¥–∞–Ω–∏—è':
        stat['category'] = 'War'
        stat['action'] = 'Builds'
        stat['label'] = '–í–æ–µ–Ω–Ω—ã–µ_–ó–¥–∞–Ω–∏—è'
        answer = player.build.build_info()
    elif command == '—Å—Ç—Ä–æ–∏—Ç—å' or command == '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å':
        stat['category'] = 'Text'
        stat['action'] = 'Build'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å'
        answer = '–ó–¥–∞–Ω–∏—è –ü–æ–¥–∑–µ–º–µ–ª—å—è:\n'
        answer += player.cave_build()
        if player.build.citadel:
            answer += '\n–ó–¥–∞–Ω–∏—è –ó–µ–º–µ–ª—å:\n'
            answer += player.land_build()

    # –¢–∞–≤–µ—Ä–Ω–∞
    # TODO —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ–Ω—å –Ω–∞–¥–æ
    elif re.match(r'–∫–æ—Å—Ç–∏', command):
        if chat_info['peer_id'] != chat_info['user_id']:
            try:
                chat = Chat.objects.get(peer_id=chat_info['peer_id'])
                bones = chat.bones_on
            except Chat.DoesNotExist:
                bones = True
        else:
            bones = True
        if re.search(r'–¥–µ—Ä–µ–≤–æ', command) and bones:
            count = amount(command)
            if count > 0:
                answer = player.build.tavern_bones(action_time, 'wood', count)
            else:
                answer = "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ 0 —Ä–µ—Å—É—Ä—Å–∞!"
        elif re.search(r'–∫–∞–º–µ–Ω—å', command) and bones:
            count = amount(command)
            if count > 0:
                answer = player.build.tavern_bones(action_time, 'stone', count)
            else:
                answer = "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ 0 —Ä–µ—Å—É—Ä—Å–∞!"
        elif re.search(r'–∂–µ–ª–µ–∑–æ', command) and bones:
            count = amount(command)
            if count > 0:
                answer = player.build.tavern_bones(action_time, 'iron', count)
            else:
                answer = "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ 0 —Ä–µ—Å—É—Ä—Å–∞!"
        elif re.search(r'–∫—Ä–∏—Å—Ç–∞–ª–ª—ã', command) and bones:
            count = amount(command)
            if count > 0:
                answer = player.build.tavern_bones(action_time, 'diamond', count)
            else:
                answer = "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ 0 —Ä–µ—Å—É—Ä—Å–∞!"
        elif re.search(r'–∑–æ–ª–æ—Ç–æ', command) and bones:
            count = amount(command)
            if count > 1000:
                answer = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–æ–ª–æ—Ç–æ–º 1000!"
            elif 0 < count <= 1000:
                answer = player.build.tavern_bones(action_time, 'gold', count)
            else:
                answer = "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ 0 —Ä–µ—Å—É—Ä—Å–∞!"
        elif not bones:
            answer = '–ö–æ—Å—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ—Å–µ–¥—ã.'
        else:
            answer = player.bones()

    # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ

    elif command == '—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–ª–∞–¥' or command == '—É–ª—É—á—à–∏—Ç—å —Å–∫–ª–∞–¥':
        stat['category'] = 'Build'
        stat['action'] = 'Build_Stock'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–°–∫–ª–∞–¥'
        answer = player.build.build_stock(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å –∫—É–∑–Ω–∏—Ü', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Forge'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ö—É–∑–Ω–∏—Ü–∞'
        answer = player.build.build_forge(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–≤–µ—Ä–Ω', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Tavern'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–¢–∞–≤–µ—Ä–Ω–∞'
        answer = player.build.build_tavern(action_time)
    elif command == '—Å—Ç—Ä–æ–∏—Ç—å —Ü–∏—Ç–∞–¥–µ–ª—å':
        stat['category'] = 'Build'
        stat['action'] = 'Build_Citadel'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–¶–∏—Ç–∞–¥–µ–ª—å'
        answer = player.build.build_citadel(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∑–∞—Ä–º', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Barracks'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ö–∞–∑–∞—Ä–º—ã'
        answer = player.build.build_barracks(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–µ–ª—å–±–∏—â', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Archery'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–°—Ç—Ä–µ–ª—å–±–∏—â–µ'
        answer = player.build.build_archery(action_time)
    elif command == '—Å—Ç—Ä–æ–∏—Ç—å –±–∞—à–Ω—è –º–∞–≥–æ–≤' or command == '—Å—Ç—Ä–æ–∏—Ç—å –±–∞—à–Ω—é –º–∞–≥–æ–≤':
        stat['category'] = 'Build'
        stat['action'] = 'Build_Magic'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ú–∞–≥–∏—è'
        answer = player.build.build_magic(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å –±–∞—à–Ω', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Tower'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ë–∞—à–Ω—è'
        answer = player.build.build_tower(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–µ–Ω', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Wall'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–°—Ç–µ–Ω–∞'
        answer = player.build.build_wall(action_time)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å –ª–µ—Å–æ–ø–∏–ª–∫', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Woodmine'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–õ–µ—Å–æ–ø–∏–ª–∫–∞'
        answer = player.build.build_wood_mine(action_time, player.lvl)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–º–µ–Ω–æ–ª–æ–º–Ω', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Stonemine'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è'
        answer = player.build.build_stone_mine(action_time, player.lvl)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å —Ä—É–¥–Ω–∏–∫', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Ironmine'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–†—É–¥–Ω–∏–∫'
        answer = player.build.build_iron_mine(action_time, player.lvl)
    elif re.match(r'—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–∏—Å–∫', command):
        stat['category'] = 'Build'
        stat['action'] = 'Build_Diamondmine'
        stat['label'] = '–°—Ç—Ä–æ–∏—Ç—å_–ü—Ä–∏–∏—Å–∫'
        answer = player.build.build_diamond_mine(action_time, player.lvl)

    # –î–æ–±—ã—á–∞

    elif re.match(r'–∫–∞–º–µ–Ω—å', command):
        stat['category'] = 'Get'
        stat['action'] = 'Get_Stone'
        stat['label'] = '–î–æ–±—ã—Ç—å_–ö–∞–º–µ–Ω—å'
        stat['value'] = amount(command)
        count = amount(command)
        if count > 0:
            answer = player.get_stone(action_time, chat_info, count)
    elif re.match(r'–¥–µ—Ä–µ–≤–æ', command):
        stat['category'] = 'Get'
        stat['action'] = 'Get_Wood'
        stat['label'] = '–î–æ–±—ã—Ç—å_–î–µ—Ä–µ–≤–æ'
        stat['value'] = amount(command)
        answer = player.get_wood(action_time, chat_info, amount(command))
    elif re.match(r'–∂–µ–ª–µ–∑–æ', command):
        stat['category'] = 'Get'
        stat['action'] = 'Get_Iron'
        stat['label'] = '–î–æ–±—ã—Ç—å_–ñ–µ–ª–µ–∑–æ'
        stat['value'] = amount(command)
        count = amount(command)
        if count > 0:
            answer = player.get_iron(action_time, chat_info, count)
    elif re.match(r'–∫—Ä–∏—Å—Ç–∞–ª', command):
        stat['category'] = 'Get'
        stat['action'] = 'Get_Diamond'
        stat['label'] = '–î–æ–±—ã—Ç—å_–ö—Ä–∏—Å—Ç–∞–ª—ã'
        stat['value'] = amount(command)
        count = amount(command)
        if count > 0:
            answer = player.get_diamond(action_time, chat_info, count)

    # –ö—Ä–∞—Ñ—Ç
    elif command == '–∫–æ–≤–∞—Ç—å':
        if player.build.forge:
            answer = "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ–≤–∫–∏!\n–ö–∏—Ä–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∏—Ä–∫–∏ –¥–ª—è –∫–æ–≤–∫–∏."
        else:
            answer = "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –ö—É–∑–Ω–∏—Ü—É!"
    elif '–∫–æ–≤–∞—Ç—å –∫–∞–º–µ–Ω–Ω' in command:
        stat['category'] = 'Craft'
        stat['action'] = 'Craft_Stone_Pickaxe'
        stat['label'] = '–ö–æ–≤–∞—Ç—å_–ö–∞–º–µ–Ω–Ω–∞—è_–ö–∏—Ä–∫–∞'
        answer = player.craft_stone_pickaxe(action_time)
    elif '–∫–æ–≤–∞—Ç—å –∂–µ–ª–µ–∑–Ω' in command:
        stat['category'] = 'Craft'
        stat['action'] = 'Craft_Iron_Pickaxe'
        stat['label'] = '–ö–æ–≤–∞—Ç—å_–ñ–µ–ª–µ–∑–Ω–∞—è_–ö–∏—Ä–∫–∞'
        answer = player.craft_iron_pickaxe(action_time)
    elif '–∫–æ–≤–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª—å–Ω' in command:
        stat['category'] = 'Craft'
        stat['action'] = 'Craft_Diamond_Pickaxe'
        stat['label'] = '–ö–æ–≤–∞—Ç—å_–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è_–ö–∏—Ä–∫–∞'
        answer = player.craft_diamond_pickaxe(action_time)
    elif '–∫–æ–≤–∞—Ç—å –∫–æ—Å—Ç—è–Ω' in command:
        stat['category'] = 'Craft'
        stat['action'] = 'Craft_Skull_Pickaxe'
        stat['label'] = '–ö–æ–≤–∞—Ç—å_–ö–æ—Å—Ç—è–Ω–∞—è_–ö–∏—Ä–∫–∞'
        answer = player.craft_skull_pickaxe(action_time)

    # –õ–æ–∫–∞—Ü–∏–∏—Ü

    elif command == 'cave':
        stat['category'] = 'Place'
        stat['action'] = 'Cave'
        stat['label'] = '–ü–æ–¥–∑–µ–º–µ–ª—å–µ'
        answer = player.cave()
    elif command == 'mine' or command == '—à–∞—Ö—Ç–∞':
        stat['category'] = 'Place'
        stat['action'] = 'Mine'
        stat['label'] = '–®–∞—Ö—Ç–∞'
        answer = player.mine()
    elif command == '–∫—É–∑–Ω–∏—Ü–∞':
        stat['category'] = 'Place'
        stat['action'] = 'Forge'
        stat['label'] = '–ö—É–∑–Ω–∏—Ü–∞'
        answer = player.forge()
    elif command == '–∫–∏—Ä–∫–∏':
        stat['category'] = 'Place'
        stat['action'] = 'Pickaxes'
        stat['label'] = '–ö–∏—Ä–∫–∏'
        answer = player.forge_pickaxe()
    elif command == '—Ç–∞–≤–µ—Ä–Ω–∞':
        stat['category'] = 'Place'
        stat['action'] = 'Tavern'
        stat['label'] = '–¢–∞–≤–µ—Ä–Ω–∞'
        answer = player.tavern()
    elif command == 'land':
        stat['category'] = 'Place'
        stat['action'] = 'Land'
        stat['label'] = '–ó–µ–º–ª–∏'
        answer = player.land()
    elif command == '—Ü–∏—Ç–∞–¥–µ–ª—å':
        stat['category'] = 'Place'
        stat['action'] = 'Citadel'
        stat['label'] = '–¶–∏—Ç–∞–¥–µ–ª—å'
        answer = player.citadel(action_time)
    elif command == '–≤–æ–π–Ω–∞':
        stat['category'] = 'Place'
        stat['action'] = 'War'
        stat['label'] = '–í–æ–π–Ω–∞'
        answer = player.war_menu()
    elif command in ('–Ω–∞–π–º', '–Ω–∞–Ω—è—Ç—å'):
        stat['category'] = 'Place'
        stat['action'] = 'Buy'
        stat['label'] = '–ù–∞–π–º'
        answer = player.buy(action_time)

    # –ê—Ä–º–∏—è

    elif re.match(r'–≤–æ–∏–Ω', command):
        stat['category'] = 'Army'
        stat['action'] = 'Warrior'
        stat['label'] = '–í–æ–∏–Ω'
        stat['value'] = amount(command)
        answer = player.war.craft_warrior(player.build, action_time, amount(command))
    elif re.match(r'–ª—É—á–Ω–∏–∫', command):
        stat['category'] = 'Army'
        stat['action'] = 'Archer'
        stat['label'] = '–õ—É—á–Ω–∏–∫'
        stat['value'] = amount(command)
        answer = player.war.craft_archer(player.build, action_time, amount(command))
    elif re.match(r'–º–∞–≥', command):
        stat['category'] = 'Army'
        stat['action'] = 'Archer'
        stat['label'] = '–õ—É—á–Ω–∏–∫'
        stat['value'] = amount(command)
        answer = player.war.craft_wizard(player.build, action_time, amount(command))

    elif command == '–Ω–∞–Ω—è—Ç—å –º–∞–∫—Å':
        answer = player.war.craft_equally(action_time)

    # –û—Ö–æ—Ç–∞

    elif command == '–æ—Ö–æ—Ç–∞':
        answer = player.hunt(action_time)
    elif re.match(r'–æ—Ö–æ—Ç–∞ –≤–æ–∏–Ω', command):
        answer = player.hunting_war(action_time)
    elif re.match(r'–æ—Ö–æ—Ç–∞ –ª—É—á–Ω–∏–∫', command):
        answer = player.hunting_arch(action_time)
    elif re.match(r'–æ—Ö–æ—Ç–∞ –º–∞–≥', command):
        answer = player.hunting_wiz(action_time)

    # –í–æ–π–Ω–∞

    elif command == '—â–∏—Ç':
        stat['category'] = 'War'
        stat['action'] = 'Shield'
        stat['label'] = '–©–∏—Ç'
        answer = player.war.shield_info(action_time)
    elif command == ('–ø–æ–∏—Å–∫' or '–∏—Å–∫–∞—Ç—å'):
        stat['category'] = 'War'
        stat['action'] = 'Find'
        stat['label'] = '–ü–æ–∏—Å–∫'
        answer = player.war.find_enemy(player.lvl, action_time)
    elif command == '—Ä–∞–∑–≤–µ–¥–∫–∞':
        answer = player.war.scouting(action_time)
    elif command == '–∞—Ç–∞–∫–∞':
        stat['category'] = 'War'
        stat['action'] = 'Attack'
        stat['label'] = '–ê—Ç–∞–∫–∞'
        answer = player.war.attack(player, action_time, chat_info)
    elif command == '–∞—Ä–º–∏—è':
        stat['category'] = 'War'
        stat['action'] = 'Army'
        stat['label'] = '–ê—Ä–º–∏—è'
        answer = player.war.army()

    elif re.match(r'–æ—Ç–∫—Ä—ã—Ç—å', command):
        stat['category'] = 'Chests'
        stat['action'] = 'Open'
        stat['label'] = '–û—Ç–∫—Ä—ã—Ç—å'
        chest = get_chest_object(command)
        if chest:
            answer = open_trophy_chest(player, chest)
        else:
            answer = '–¢–∞–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'

    elif re.match(r'—Ä–µ–ø–æ—Ä—Ç', command):
        stat['category'] = 'System'
        stat['action'] = 'Report'
        stat['label'] = '–†–µ–ø–æ—Ä—Ç'
        answer = Report.report(Report, player, command, chat_info)

    elif re.match(r'–æ—Ç–≤–µ—Ç', command) and player.user_id == 55811116:
        stat['category'] = 'System'
        stat['action'] = 'Answer_Report'
        stat['label'] = '–û—Ç–≤–µ—Ç_–†–µ–ø–æ—Ä—Ç'
        answer = Report.answer_report(Report, command)

    # –†—ã–Ω–æ–∫

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤

    elif command == "—Å—Ç—Ä–æ–∏—Ç—å —Ä—ã–Ω–æ–∫"\
            or command == "—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Å—Ç"\
            or command == "—É–ª—É—á—à–∏—Ç—å —Ä—ã–Ω–æ–∫"\
            or command == "—É–ª—É—á—à–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Å—Ç":
        answer = player.build.build_market(action_time)

    elif re.match(r'–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', command):
        answer = player._send_res(command, action_time)

    # –¢–æ—Ä–≥–æ–≤–ª—è

    elif command == "—Ä—ã–Ω–æ–∫" or command == "–∫—É–ø–∏—Ç—å" or command == "–ø—Ä–æ–¥–∞—Ç—å" or command == "—Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Å—Ç":
        answer = Product.info(player)
    elif command == "—Ä—ã–Ω–æ–∫ –¥–µ—Ä–µ–≤–æ":
        answer = Product.market_res(player, 'wood')
    elif command == "—Ä—ã–Ω–æ–∫ –∫–∞–º–µ–Ω—å":
        answer = Product.market_res(player, 'stone')
    elif command == "—Ä—ã–Ω–æ–∫ –∂–µ–ª–µ–∑–æ":
        answer = Product.market_res(player, 'iron')
    elif re.match(r'—Ä—ã–Ω–æ–∫ –∫—Ä–∏—Å—Ç–∞–ª', command):
        answer = Product.market_res(player, 'diamond')
    elif re.match(r'—Ä—ã–Ω–æ–∫ —á–µ—Ä–µ–ø', command):
        answer = Product.market_res(player, 'skull')
    elif command == "–º–æ–∏ –ª–æ—Ç—ã":
        answer = Product.my_lots(player)
    elif command == '—Å–Ω—è—Ç—å –≤—Å–µ':
        answer = Product.del_all_lots(player)
    elif re.match(r'—Å–Ω—è—Ç—å', command):
        id = Product.get_id(command)
        if id:
            answer = Product.del_lot(player, id)
        else:
            answer = "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ª–æ—Ç–∞!"
    elif re.match(r'–ø—Ä–æ–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ', command):
        count, price = Product.get_param(command)
        if count and price:
            answer = Product.sell(player, 'wood', count, price)
        else:
            answer = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞!"
    elif re.match(r'–ø—Ä–æ–¥–∞—Ç—å –∫–∞–º–µ–Ω', command):
        count, price = Product.get_param(command)
        if count and price:
            answer = Product.sell(player, 'stone', count, price)
        else:
            answer = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞!"
    elif re.match(r'–ø—Ä–æ–¥–∞—Ç—å –∂–µ–ª–µ–∑–æ', command):
        count, price = Product.get_param(command)
        if count and price:
            answer = Product.sell(player, 'iron', count, price)
        else:
            answer = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞!"
    elif re.match(r'–ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª', command):
        count, price = Product.get_param(command)
        if count and price:
            answer = Product.sell(player, 'diamond', count, price)
        else:
            answer = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞!"
    elif re.match(r'–ø—Ä–æ–¥–∞—Ç—å —á–µ—Ä–µ–ø', command):
        count, price = Product.get_param(command)
        if count and price:
            answer = Product.sell(player, 'skull', count, price)
        else:
            answer = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞!"
    elif re.match(r'–∫—É–ø–∏—Ç—å', command):
        id = Product.get_id(command)
        if id:
            answer = Product.buy(player, id)
        else:
            answer = "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ª–æ—Ç–∞!"

    # –ê–¥–º–∏–Ω
    elif command == 'online' and player.user_id == 55811116:
        day = 86400
        this_day = action_time - day
        this_week = action_time - day * 7
        this_month = action_time - day * 30
        count_day = Player.objects.filter(last_energy_action__gte=this_day).count()
        count_week = Player.objects.filter(last_energy_action__gte=this_week).count()
        count_month = Player.objects.filter(last_energy_action__gte=this_month).count()
        count_all = Player.objects.count()
        answer = 'üåê –û–Ω–ª–∞–π–Ω üåê\n'+  \
        '–î–µ–Ω—å: ' + str(count_day) + '\n' + \
        '–ù–µ–¥–µ–ª—è: ' + str(count_week) + '\n' + \
        '–ú–µ—Å—è—Ü: ' + str(count_month) + '\n' + \
        '–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ' + str(count_all)
    elif command == 'all gold' and player.user_id == 55811116:
        stocks = Stock.objects.all()
        gold = 0
        for stock in stocks:
            gold += stock.gold
        answer = '–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞: ' + str(gold) + icon('gold')
    elif command == 'all skull' and player.user_id == 55811116:
        stocks = Stock.objects.all()
        skull = 0
        for stock in stocks:
            skull += stock.skull
        answer = '–í—Å–µ–≥–æ —á–µ—Ä–µ–ø–æ–≤: ' + str(skull) + icon('skull')
    elif re.match(r'give', command) and player.user_id == 55811116:
        if re.match(r'give skull', command):
            answer = Player.give_skull(command)
        else:
            answer = Player.give_chests(command)
    elif command == 'gencave' and player.user_id == 55811116:
        try:
            CaveMap.objects.get().delete()
        except:
            pass
        cave = CaveMap.objects.create()
        cave.cave_map = cave.generate()
        cave.save()
    elif command == 'price' and player.user_id == 55811116:
        wood_avr = Product.get_average_price('wood')
        stone_avr = Product.get_average_price('stone')
        iron_avr = Product.get_average_price('iron')
        diamond_avr = Product.get_average_price('diamond')
        skull_avr = Product.get_average_price('skull')
        answer = '–¶–µ–Ω—ã:\n' + \
                 '–î–µ—Ä–µ–≤–æ: ' + str(wood_avr) + '\n' \
                 '–ö–∞–º–µ–Ω—å: ' + str(stone_avr) + '\n' \
                 '–ñ–µ–ª–µ–∑–æ: ' + str(iron_avr) + '\n' \
                 '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã: ' + str(diamond_avr) + '\n' \
                 '–ß–µ—Ä–µ–ø–∞: ' + str(skull_avr) + '\n'

    elif re.match(r'del_lot', command) and player.user_id == 55811116:
        id = Product.get_id(command)
        answer = Product.admin_del_lot(id)

    elif command == '–∫–æ–¥ –¥–≤–∞–º–µ—Å—è—Ü–∞':
        try:
            code = PromoCode.objects.get(user_id=player.user_id, code='–¥–≤–∞–º–µ—Å—è—Ü–∞')
            answer = '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥!'
        except PromoCode.DoesNotExist:
            code = PromoCode.objects.create(user_id=player.user_id, code='–¥–≤–∞–º–µ—Å—è—Ü–∞')
            code.save()
            chest = get_chest('present_chest')
            add_chest(player, chest, 5)
            answer = '–ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n' + \
                     '–ü–æ–ª—É—á–µ–Ω–æ 5 –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤!\n'

    # –ê–ª—Ç–∞—Ä—å

    elif command == '–∞–ª—Ç–∞—Ä—å':
        answer = altar_info(player)
    elif re.match(r'–∞–ª—Ç–∞—Ä—å', command):
        answer = altar(command, player, action_time, chat_info)

    # –≠–ª—å

    elif command == '–≤—Å–µ–º —ç–ª—å!!!':
        if chat_info['peer_id'] != chat_info['user_id']:
            try:
                chat = Chat.objects.get(peer_id=chat_info['peer_id'])
                alco = chat.alco_on
            except Chat.DoesNotExist:
                alco = True
        else:
            alco = True
        if alco:
            answer = player.alcohol(chat_info, action_time)
        else:
            answer = '–≠–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ—Å–µ–¥—ã.'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–µ–¥

    elif chat_info['peer_id'] != chat_info['user_id'] and command == '!–∫–æ–º–∞–Ω–¥—ã' and is_admin(player.user_id, chat_info):
        answer = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ—Å–µ–¥–æ–π:\n' + \
                 '!–∫–æ—Å—Ç–∏ - –≤–∫–ª/–≤—ã–∫–ª –∫–æ—Å—Ç–∏\n' + \
                 '!—ç–ª—å - –≤–∫–ª/–≤—ã–∫–ª —ç–ª—å\n' + \
                 '!—Ä–∞—Å—Å—ã–ª–∫–∞ - –≤–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–µ—Å–µ–¥–µ\n'

    elif chat_info['peer_id'] != chat_info['user_id'] and command == '!–∫–æ—Å—Ç–∏' and is_admin(player.user_id, chat_info):
        try:
            chat = Chat.objects.get(peer_id=chat_info['peer_id'])
            answer = chat.bones_change()
        except Chat.DoesNotExist:
            answer = '–í–∞—à–µ–π –±–µ—Å–µ–¥—ã –Ω–µ—Ç –≤ –±–∞–∑–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "—Ä–µ–ø–æ—Ä—Ç".'

    elif chat_info['peer_id'] != chat_info['user_id'] and command == '!—ç–ª—å' and is_admin(player.user_id, chat_info):
        try:
            chat = Chat.objects.get(peer_id=chat_info['peer_id'])
            answer = chat.alco_change()
        except Chat.DoesNotExist:
            answer = '–í–∞—à–µ–π –±–µ—Å–µ–¥—ã –Ω–µ—Ç –≤ –±–∞–∑–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "—Ä–µ–ø–æ—Ä—Ç".'

    elif chat_info['peer_id'] != chat_info['user_id'] and command == '!—Ä–∞—Å—Å—ã–ª–∫–∞' and is_admin(player.user_id, chat_info):
        try:
            chat = Chat.objects.get(peer_id=chat_info['peer_id'])
            answer = chat.distribution_change()
        except Chat.DoesNotExist:
            answer = '–í–∞—à–µ–π –±–µ—Å–µ–¥—ã –Ω–µ—Ç –≤ –±–∞–∑–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "—Ä–µ–ø–æ—Ä—Ç".'

    # –ë–µ—Å–µ–¥—ã

    elif command == '–±–µ—Å–µ–¥—ã':
        answer = chat_list()

    elif command == '—Ç–µ—Å—Ç':
        answer = Product.del_all_lots(player)
    # –ü–µ—â–µ—Ä—ã

    elif re.match(r'–ø–µ—â–µ—Ä—ã', command) or re.match(r'–ø', command):
        move_commands = (
            '–ø–µ—â–µ—Ä—ã', 
            '–ø–µ—â–µ—Ä—ã —Å–µ–≤–µ—Ä', 
            '–ø–µ—â–µ—Ä—ã –∑–∞–ø–∞–¥', 
            '–ø–µ—â–µ—Ä—ã –≤–æ—Å—Ç–æ–∫', 
            '–ø–µ—â–µ—Ä—ã —é–≥', 
            '–ø —Å', 
            '–ø –≤', 
            '–ø –∑', 
            '–ø —é', 
            '–ø–µ—â–µ—Ä—ã —Å', 
            '–ø–µ—â–µ—Ä—ã –∑', 
            '–ø–µ—â–µ—Ä—ã –≤', 
            '–ø–µ—â–µ—Ä—ã —é'
            )
        if not player.cave_progress:
            cave = CaveMap.objects.get()
            cave_progress = CaveProgress.objects.create(user_id=player.user_id, cave=cave)
            player.cave_progress = cave_progress
            player.save(update_fields=['cave_progress'])
        if command == '–ø–µ—â–µ—Ä—ã':
            answer = 'üï∏ –ü–µ—â–µ—Ä—ã üï∏ - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –ª–∞–±–∏—Ä–∏–Ω—Ç.\n' + \
            '–ù–∞ –∫–∞–∂–¥–æ–º –∏–∑ —É—Ä–æ–≤–Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ, –ø–ª–æ—Ö–æ–µ –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –¥–∞–ª—å—à–µ.\n' + \
            '–ö–∞—Ä—Ç–∞ –ø–µ—â–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ–±—â–∞—è.\n' + \
            '–ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –¥–æ–±–∏—Ä–∞–µ—Ç—Å—è –¥–æ —Å–æ–∫—Ä–æ–≤–∏—â, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–≤–∞–ª, –ø–µ—â–µ—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ!\n\n' + \
            '–ö–æ–º–∞–Ω–¥—ã:\n' + \
            '- –ü–µ—â–µ—Ä—ã –≤–æ–π—Ç–∏ - –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–µ—â–µ—Ä\n' + \
            '- –ü–µ—â–µ—Ä—ã —Å–µ–≤–µ—Ä - –≤—ã–±–æ—Ä –ø—É—Ç–∏\n' + \
            '- –ü–µ—â–µ—Ä—ã –≤–æ—Å—Ç–æ–∫ - –≤—ã–±–æ—Ä –ø—É—Ç–∏\n' + \
            '- –ü–µ—â–µ—Ä—ã –∑–∞–ø–∞–¥ - –≤—ã–±–æ—Ä –ø—É—Ç–∏\n' + \
            '- –ü–µ—â–µ—Ä—ã —é–≥ - –≤—ã–±–æ—Ä –ø—É—Ç–∏\n' + \
            '- –ü–µ—â–µ—Ä—ã –≤–≤–µ—Ä—Ö - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–ª—ã–π —É—Ä–æ–≤–µ–Ω—å\n' + \
            '- –ü–µ—â–µ—Ä—ã –≤–Ω–∏–∑ - —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥. —É—Ä–æ–≤–µ–Ω—å\n'
        elif command == '–ø–µ—â–µ—Ä—ã –∏–Ω—Ñ–æ':
            answer = player.cave_progress.info()
        elif command == '–ø–µ—â–µ—Ä—ã –≤–æ–π—Ç–∏':
            army = player.lvl * 3
            if player.war.sum_army() < army:
                answer = '–î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–µ—â–µ—Ä –≤–∞–º –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ' + str(army) + ' ‚öî –∞—Ä–º–∏–∏!'
            else:
                cave_manager = CaveManager(player)
                answer = cave_manager.start(player, action_time)
        elif command in ('–ø–µ—â–µ—Ä—ã –≤–Ω–∏–∑', '–ø –≤–Ω–∏–∑'):
            cave_manager = CaveManager(player)
            answer = cave_manager.go_down(player)
        elif command in ('–ø–µ—â–µ—Ä—ã –≤–≤–µ—Ä—Ö', '–ø –≤–≤–µ—Ä—Ö'):
            cave_manager = CaveManager(player)
            answer = cave_manager.go_up(player)
        elif command in move_commands:
            cave_manager = CaveManager(player)
            answer = cave_manager.move(player, command)

    # –†–∞—Å—Å—ã–ª–∫–∞

    elif command == '—Ä–∞—Å—Å—ã–ª–∫–∞':
        if player.distribution:
            player.distribution = False
            player.save(update_fields=['distribution'])
            answer = 'üò¢ –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É! üò¢\n' + \
                     '–ß—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞–≤–∞—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –Ω–∞–ø–∏—à–∏—Ç–µ "—Ä–∞—Å—Å—ã–ª–∫–∞"'
        else:
            player.distribution = True
            player.save(update_fields=['distribution'])
            answer = 'üëçüèª –í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É! üëçüèª\nC–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!'

    if hasattr(player, 'keyboard'):
        keyboard = player.keyboard
    else:
        keyboard = get_keyboard(player, action_time)

    alco_except = (
    '–ø–µ—â–µ—Ä—ã', 
    '–ø–µ—â–µ—Ä—ã –≤–æ–π—Ç–∏', 
    '–ø–µ—â–µ—Ä—ã —Å–µ–≤–µ—Ä', 
    '–ø–µ—â–µ—Ä—ã –∑–∞–ø–∞–¥', 
    '–ø–µ—â–µ—Ä—ã –≤–æ—Å—Ç–æ–∫', 
    '–ø–µ—â–µ—Ä—ã —é–≥', 
    '–ø —Å', 
    '–ø –≤', 
    '–ø –∑', 
    '–ø —é', 
    '–ø–µ—â–µ—Ä—ã —Å', 
    '–ø–µ—â–µ—Ä—ã –∑', 
    '–ø–µ—â–µ—Ä—ã –≤', 
    '–ø–µ—â–µ—Ä—ã —é', 
    '–ø–µ—â–µ—Ä—ã –≤–Ω–∏–∑', 
    '–ø–µ—â–µ—Ä—ã –≤–≤–µ—Ä—Ö', 
    '–ø –≤–Ω–∏–∑', 
    '–ø –≤–≤–µ—Ä—Ö',
    '–≤—Å–µ–º —ç–ª—å!!!',
    '–±–µ—Å–µ–¥—ã',
    '–¥–æ–Ω–∞—Ç'
    )
    if command not in alco_except:
        if answer and player.user_id != 55811116:
            if chat_info['peer_id'] != chat_info['user_id']:
                answer = player.alcohol_mess(action_time, answer)

    threading.Thread(target=send, args=(chat_info, answer, keyboard)).start()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—ã –∏–∑ –±–µ—Å–µ–¥, –µ—Å–ª–∏ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞
    if answer and chat_info['user_id'] != chat_info['peer_id']:
        Player.objects.filter(user_id=chat_info['user_id']).update(chat_id=chat_info['peer_id'])
        add_update_chat(chat_info)

    if answer:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        threading.Thread(target=track, args=(player.user_id, stat)).start()

def comments_action(comment):
    if comment['from_id'] == -176853872:
        return True

    try:
        player = Player.objects.get(user_id=comment['from_id'])
    except Player.DoesNotExist:
        player = False

    if player:
        if comment['text'].lower() in ('#–∏–≥—Ä–∞—é', '#–∏–≥—Ä–∞—Ç—å', '#–∫—Ä—É—Ç–∏—Ç—å', '#–∫—Ä—É—Ç–∏', '#—Ñ–æ—Ä—Ç—É–Ω–∞', '#—É–¥–∞—á–∞', '#–∞–∑–∏–Ω–æ', '#–ø–æ–¥–Ω—è—Ç—å–±–∞–±–ª–∞'):
            fortune = Fortune(player, comment)
            fortune.fortune()
    else:
        answer = '–Ø –≤–∏–∂—É —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π!\n–ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å –∏ —Å—Ç–∞–Ω—å —Å–∏–ª—å–Ω–µ–π—à–∏–º –õ–æ—Ä–¥–æ–º!\nvk.me/cave_world_bot'
        send_comment(comment['post_id'], comment['id'], answer)

    return True

