from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse

from decouple import config
import json
import vk_api
import random
from vk_api.keyboard import VkKeyboard, VkKeyboardColor


from .models import Player, Stock, Build

# Create your views here.

secret_token = config('SECRET_TOKEN')
confirmation_token = config('CONFIRMATION_TOKEN')
token = config('TOKEN')


def get_random_id():
    """ Get random int32 number (signed) """
    return random.getrandbits(31) * random.choice([-1, 1])


@csrf_exempt
def index(request):
    if request.method == 'POST':
        data = json.loads(request.body.decode("utf-8"))
        if data['secret'] == secret_token:
            if data['type'] == 'confirmation':
                return HttpResponse(confirmation_token, content_type="text/plain", status=200)
            if data['type'] == 'message_new':
                vk_session = vk_api.VkApi(token=token)
                vk = vk_session.get_api()
                user_id = data['object']['from_id']
                reg = register(vk=vk, user_id=user_id)
                player = Player.objects.get(user_id=user_id)
                if reg == 'new':
                    vk.messages.send(
                        access_token=token,
                        user_id=str(user_id),
                        message='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cave World!',
                        keyboard=get_keyboard(player=player),
                        random_id=get_random_id()
                    )
                    return HttpResponse('ok', content_type="text/plain", status=200)
                elif reg == 'old':
                    if data['object']['payload']:
                        payload = json.loads(data['object']['payload'])
                        command = payload['command']
                        action(vk=vk, command=command, user_id=user_id)
                    else:
                        vk.messages.send(
                            access_token=token,
                            user_id=str(user_id),
                            message='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!',
                            keyboard=get_keyboard(player=player),
                            random_id=get_random_id()
                        )
                    return HttpResponse('ok', content_type="text/plain", status=200)
            return HttpResponse('–û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π type')
        else:
            return HttpResponse('–û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π secret key')
    else:
        return HttpResponse('–°–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')


def register(vk, user_id):
    if not Player.objects.filter(user_id=user_id).exists():
        stock = Stock.objects.create(user_id=user_id)
        build = Build.objects.create(user_id=user_id)
        player = Player.objects.create(user_id=user_id, stock=stock, build=build)
        user = vk.users.get(user_ids=str(user_id))
        user = user[0]
        if user['first_name']:
            player.first_name = user['first_name']
        if user['last_name']:
            player.last_name = user['last_name']
        player.save()
        return 'new'
    return 'old'


def action(vk, command, user_id):
    if command.lower() == 'profile':
        profile(vk=vk, user_id=user_id)
    elif command.lower() == 'stock':
        stock(vk=vk, user_id=user_id)
    elif command.lower() == 'mine':
        mine(vk=vk, user_id=user_id)
    elif command.lower() == 'cave':
        cave(vk=vk, user_id=user_id)
    elif command.lower() == 'cave_build':
        cave_build(vk=vk, user_id=user_id)
    elif command.lower() == 'build_forge':
        build_forge(vk=vk, user_id=user_id)
    elif command.lower() == 'build_tavern':
        build_tavern(vk=vk,user_id=user_id)


def profile(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    message = '–ò–º—è: ' + player.first_name + "\n" + \
              '–§–∞–º–∏–ª–∏—è: ' + player.last_name + "\n" + \
              'ID: ' + str(player.user_id) + "\n" + \
              '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ' + player.place
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )


def stock(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    stock = player.stock
    message = '–°–∫–ª–∞–¥ - ' + str(stock.lvl) + ' —É—Ä.' + '\n' + \
              '–ö–∞–º–µ–Ω—å: ' + str(stock.stone) + '/' + str(stock.stone_max) + '\n' + \
              '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞: ' + str(stock.ore_iron) + '/' + str(stock.ore_iron_max) + '\n' + \
              '–ó–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞: ' + str(stock.ore_gold) + '/' + str(stock.ore_gold_max) + '\n' + \
              '–°–ª–∏—Ç–∫–∏ –∂–µ–ª–µ–∑–∞: ' + str(stock.ingot_iron) + '/' + str(stock.ingot_iron_max) + '\n' + \
              '–°–ª–∏—Ç–∫–∏ –∑–æ–ª–æ—Ç–∞: ' + str(stock.ingot_gold) + '/' + str(stock.ingot_gold_max) + '\n' + \
              '–ß–µ—Ä–µ–ø–∞: ' + str(stock.skull) + ' üíÄ'
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )


def mine(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    if player.place == 'mine':
        message = '–í—ã —É–∂–µ –≤ —à–∞—Ö—Ç–µ'
    else:
        player.place = 'mine'
        player.save()
        message = '–í—ã —Å–ø—É—Å—Ç–∏–ª–∏ –≤ —à–∞—Ö—Ç—É'
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )


def cave(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    if player.place == 'cave':
        message = '–í—ã —É–∂–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ'
    else:
        player.place = 'cave'
        player.save()
        message = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ'
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )


def cave_build(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    if player.place == 'cave_build':
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É'
    else:
        player.place = 'cave_build'
        player.save()
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è'
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )


def build_forge(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    if not player.build.forge:
        player.build.forge = True
        player.build.save()
        message = '–ö—É–∑–Ω–∏—Ü–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞'
    else:
        message = '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ö—É–∑–Ω–∏—Ü–∞'
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )


def build_tavern(vk, user_id):
    player = Player.objects.get(user_id=user_id)
    if not player.build.tavern:
        player.build.tavern = True
        player.build.save()
        message = '–¢–∞–≤–µ—Ä–Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞'
    else:
        message = '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¢–∞–≤–µ—Ä–Ω–∞'
    vk.messages.send(
        access_token=token,
        user_id=str(user_id),
        keyboard=get_keyboard(player=player),
        message=message,
        random_id=get_random_id()
    )





def get_keyboard(player):
    keyboard = VkKeyboard()
    if player.place == 'cave':
        if player.build.lift:
            keyboard.add_button('–ó–µ–º–ª–∏', color=VkKeyboardColor.PRIMARY, payload={"command": "land"})
        keyboard.add_button('–®–∞—Ö—Ç–∞', color=VkKeyboardColor.PRIMARY, payload={"command": "mine"})
        keyboard.add_line()
        keyboard.add_button('–ó–¥–∞–Ω–∏—è', color=VkKeyboardColor.DEFAULT, payload={"command": "cave_build"})
        if player.build.forge:
            keyboard.add_button('‚öí –ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å', color=VkKeyboardColor.DEFAULT)
        if player.build.tavern:
            keyboard.add_button('–ù–∞–Ω—è—Ç—å', color=VkKeyboardColor.DEFAULT)
        keyboard.add_line()
        keyboard.add_button('–ü—Ä–æ—Ñ–∏–ª—å', color=VkKeyboardColor.DEFAULT, payload={"command": "profile"})
        keyboard.add_button('üè§ –°–∫–ª–∞–¥', color=VkKeyboardColor.DEFAULT, payload={"command": "stock"})
    if player.place == 'cave_build':
        keyboard.add_button('üè§ –°–∫–ª–∞–¥', color=VkKeyboardColor.DEFAULT, payload={"command": "build_stock"})
        keyboard.add_button('–ü–µ—á—å', color=VkKeyboardColor.DEFAULT, payload={"command": "build_furnace"})
        keyboard.add_line()
        if not player.build.forge:
            keyboard.add_button('–ö—É–∑–Ω–∏—Ü–∞', color=VkKeyboardColor.DEFAULT, payload={"command": "build_forge"})
        if not player.build.tavern:
            keyboard.add_button('–¢–∞–≤–µ—Ä–Ω–∞', color=VkKeyboardColor.DEFAULT, payload={"command": "build_tavern"})
        if not player.build.lift:
            keyboard.add_button('–õ–∏—Ñ—Ç', color=VkKeyboardColor.DEFAULT, payload={"command": "build_lift"})
        keyboard.add_line()
        keyboard.add_button('–ú–µ–Ω—é –ø–æ–¥–∑–µ–º–µ–ª—å—è', color=VkKeyboardColor.PRIMARY, payload={"command": "cave"})
    if player.place == 'mine':
        keyboard.add_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', color=VkKeyboardColor.PRIMARY, payload={"command": "cave"})
        keyboard.add_line()
        keyboard.add_button('‚õè –î–æ–±—ã—Ç—å', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button('–ü—Ä–æ—Ñ–∏–ª—å', color=VkKeyboardColor.DEFAULT, payload={"command": "profile"})
        keyboard.add_button('üè§ –°–∫–ª–∞–¥', color=VkKeyboardColor.DEFAULT, payload={"command": "stock"})
    return keyboard.get_keyboard()

